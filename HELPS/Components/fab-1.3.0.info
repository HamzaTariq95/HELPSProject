{"Name":"Floating Action Button","Id":1708,"Alias":"fab","Description":"# Floating Action Button Details\r\n\r\nAndroid floating action button which reacts on scrolling events. Becomes visible when an attached target is scrolled up and invisible when scrolled down.\r\n\r\n\r\n\r\n```xml\r\n\u003cFrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n             xmlns:fab=\"http://schemas.android.com/apk/res-auto\"\r\n             android:layout_width=\"match_parent\"\r\n             android:layout_height=\"match_parent\"\u003e\r\n\r\n    \u003cListView\r\n            android:id=\"@android:id/list\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" /\u003e\r\n\r\n    \u003ccom.refractored.fab.FloatingActionButton\r\n            android:id=\"@+id/fab\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"bottom|right\"\r\n            android:layout_margin=\"16dp\"\r\n            android:src=\"@drawable/ic_action_content_new\"\r\n            fab:fab_colorNormal=\"@color/primary\"\r\n            fab:fab_colorPressed=\"@color/primary_pressed\"\r\n            fab:fab_colorRipple=\"@color/ripple\" /\u003e\r\n\u003c/FrameLayout\u003e\r\n```\r\n\r\n**This library requires AppCompat v21+**","Version":"1.3.0","Summary":"Android floating action button which reacts on scrolling events. Becomes visible when an attached target is scrolled up and invisible when scrolled down.","QuickStart":"# Getting Started with Floating Action Button\r\n\r\n\r\n**1)** Add the Component to your Project\r\n\r\n\r\n**2)** Add the ``com.refractored.fab.FloatingActionButton`` to your layout XML file. The button should be placed in the bottom right corner of the screen. The width and height of the floating action button are hardcoded to **56dp** for the normal and **40dp** for the mini button as specified in the [guidlines].\r\n\r\n```xml\r\n\u003cFrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n             xmlns:fab=\"http://schemas.android.com/apk/res-auto\"\r\n             android:layout_width=\"match_parent\"\r\n             android:layout_height=\"match_parent\"\u003e\r\n\r\n    \u003cListView\r\n            android:id=\"@android:id/list\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" /\u003e\r\n\r\n    \u003ccom.refractored.fab.FloatingActionButton\r\n            android:id=\"@+id/fab\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"bottom|right\"\r\n            android:layout_margin=\"16dp\"\r\n            android:src=\"@drawable/ic_action_content_new\"\r\n            fab:fab_colorNormal=\"@color/primary\"\r\n            fab:fab_colorPressed=\"@color/primary_pressed\"\r\n            fab:fab_colorRipple=\"@color/ripple\" /\u003e\r\n\u003c/FrameLayout\u003e\r\n```\r\n\r\n**3)** Attach the FAB to ``AbsListView``, ``RecyclerView`` or ``ScrollView`` :\r\n\r\n```csharp\r\nvar listView = FindViewById\u003cListView\u003e(Android.Resource.Id.list);\r\nvar fab = FindViewById\u003cFloatingActionButton\u003e(Resource.Id.fab);\r\nfab.AttachToListView(listView);\r\n```\r\n\r\nCheck the sample project to see how to use custom listeners if you need to track scroll events.\r\n\r\n**4)** Add the namespace ``xmlns:fab=\"http://schemas.android.com/apk/res-auto\"`` to your layout file.\r\n\r\n+ Set the button type (normal or mini) via the ``fab_type`` xml attribute (default is normal):\r\n\r\n    ```xml\r\n    fab:fab_type=\"mini\"\r\n    ```\r\n    or\r\n    ```csharp\r\n    fab.Size = FabSize.Mini;\r\n    ```\r\n+ Set the normal and pressed colors via the xml attributes:\r\n\r\n    ```xml\r\n    fab:fab_colorNormal=\"@color/primary\"\r\n    fab:fab_colorPressed=\"@color/primary_pressed\"\r\n    ```\r\n    or\r\n    ```csharp\r\n    fab.ColorNormal = Resources.GetColor(Resource.Color.primary);\r\n    fab.ColorPressed = Resources.GetColor(Resource.Color.primary_pressed);\r\n    ```\r\n    \r\n+ Enable/disable the button shadow with the ``fab_shadow`` xml attribite (it\u0027s enabled by default):\r\n\r\n    ```xml\r\n    fab:fab_shadow=\"false\"\r\n    ```\r\n    or\r\n    ```csharp\r\n    fab..HasShadow = false;\r\n    ```\r\n    \r\n+ Show/hide the button expliciltly:\r\n    \r\n    ```csharp\r\n    fab.Show();\r\n    fab.Hide();\r\n    \r\n    fab.Show(false); // Show without an animation\r\n    fab.Hide(false); // Hide without an animation\r\n    ```\r\n    \r\n+ Specify the ripple color for API 21+:\r\n\r\n    ```xml\r\n    fab:fab_colorRipple=\"@color/ripple\"\r\n    ```\r\n\r\n    or\r\n   ```java\r\n   fab.ColorRipple = Resources.GetColor(Resource.Color.ripple);\r\n   ```\r\n\r\n**5)** Set an icon for the ``FloatingActionButton`` using ``android:src`` xml attribute. Use drawables of size **24dp** as specified by [guidlines]. Icons of desired size can be generated with [Android Asset Studio].\r\n","Hash":"31a9fbdc310a4e184152ca8ffd48e6d3","TargetPlatforms":["android"],"TrialHash":null}